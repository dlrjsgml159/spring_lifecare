<?xml version="1.0" encoding="UTF-8"?>

<!DOCTYPE mapper
    PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
 	  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
 	  
<mapper namespace="com.spring.lifecare.persistence.UserDAO">
	<select id = "selectUser" parameterType="String" resultType = "java.util.Map">
      SELECT customer_id as username, customer_pw as password, customer_name as name, enabled, authority, customer_echeck
        FROM customer
       WHERE customer_id=#{userid}  
   </select>
   
   <select id = "kakaoFindId" parameterType="String" resultType = "java.util.Map">
      SELECT customer_id as username, customer_name as name, enabled, authority
        FROM customer
       WHERE kakaoId=#{kakaoId}  
   </select>
   
   <select id = "naverFindId" parameterType="String" resultType = "java.util.Map">
      SELECT customer_id as username, customer_name as name, enabled, authority
        FROM customer
       WHERE naverId=#{naverId}  
   </select>
   
   <!--  아이디 중복확인 -->
   <select id ="idCheck" parameterType="String" resultType="int" >
     SELECT count(*)  FROM customer WHERE customer_id=#{customer_id} 
   </select>
  <!-- 핸드폰 번호 중복확인 --> 
   <select id ="phoneCheck" parameterType="String" resultType="int" >
     SELECT count(*)  FROM customer WHERE customer_phone=#{customer_phone} 
   </select>
   <!-- 이메일 중복확인 -->
   <select id ="emailCheck" parameterType="String" resultType="int" >
     SELECT count(*)  FROM customer WHERE customer_email=#{customer_email} 
   </select>
  <!--  회원가입 처리 -->
   <insert id ="insertMember" parameterType="com.spring.lifecare.vo.CustomerVO">
     INSERT INTO customer (customer_id, customer_pw, customer_name, customer_phone, customer_email, customer_gender, customer_year) VALUES (#{customer_id}, #{customer_pw},#{customer_name},#{customer_phone},#{customer_email},#{customer_gender},#{customer_year, jdbcType=VARCHAR})
   </insert>
   <!-- 이메일 인증 후 로그인 처리 --> 
   <update id="approvalMember" parameterType="String">
	  UPDATE customer set customer_echeck = 1 WHERE customer_email = #{customer_email} 
   </update>   
  <!--  아이디 찾기 --> 
   <select id ="findId"  parameterType="String" resultType="String">
      SELECT customer_id FROM customer WHERE customer_phone=#{customer_phone}
   </select>
   
  <!--  의사 아이디 중복확인 -->
   <select id ="CheckId" parameterType="String" resultType="int" >
     SELECT count(*)  FROM doctor WHERE doctor_id=#{doctor_id} 
   </select>
   <!-- 의사 핸드폰 번호 중복확인  -->
   <select id ="CheckPhone" parameterType="String" resultType="int" >
     SELECT count(*)  FROM doctor WHERE doctor_phone=#{doctor_phone} 
   </select>
   <!-- 의사 이메일 중복확인 -->
   <select id ="CheckEmail" parameterType="String" resultType="int" >
     SELECT count(*)  FROM doctor WHERE doctor_email=#{doctor_email} 
   </select>
   
   <!-- 의사 면허번호 중복확인 -->
   <select id ="CheckNum" parameterType="String" resultType="int" >
     SELECT count(*)  FROM doctor WHERE doctor_num=#{doctor_num} 
   </select>
   
      
   <!-- 의사 회원가입 처리  -->
  <insert id ="insertDoctor" parameterType="com.spring.lifecare.vo.DoctorVO">
     INSERT INTO doctor(doctor_num, doctor_pw, doctor_id, doctor_name, doctor_email, doctor_phone, doctor_major, doctor_position, doctor_faceimg) 
      VALUES (#{doctor_num},#{doctor_pw},#{doctor_id},#{doctor_name},#{doctor_email},#{doctor_phone},#{doctor_major},#{doctor_position},#{doctor_faceimg})
   </insert>
   <!-- 정보수정과 회원탈퇴 아이디, 비밀번호 체크 -->
   <select id="idPwdCheck"  parameterType="String" resultType="String">
        SELECT customer_pw FROM customer WHERE customer_id=#{customer_id}
   </select>
   
   <!-- 내 정보 가져오기 -->
    <select id="myInformation" resultType="com.spring.lifecare.vo.CustomerVO">
        SELECT customer_id, customer_name, customer_phone, customer_email, customer_gender, customer_year FROM customer WHERE customer_id=#{customer_id, jdbcType=VARCHAR}
   </select> 
   
   <!-- 내 정보 수정하기  -->
   <update id="updateMyInformation"   parameterType ="com.spring.lifecare.vo.CustomerVO">
       UPDATE customer SET customer_phone=#{customer_phone}, customer_email=#{customer_email} WHERE customer_id=#{customer_id, jdbcType=VARCHAR}   
   </update>
 
   <!-- 마이페이지 비밀번호 변경  -->
   <update id ="changePassword" parameterType ="com.spring.lifecare.vo.CustomerVO">       
	 UPDATE customer SET customer_pw=#{customer_pw} WHERE customer_id=#{customer_id, jdbcType=VARCHAR}  
  </update>

   <!-- 회원 이름 불러오기 -->
   <select id="loadCustomerName" parameterType="String" resultType="String">
   		SELECT customer_name FROM customer WHERE customer_id=#{customer_id}
   </select>
   
   <!-- 맴버 휴먼처리 -->
   <update id ="memberHuman" parameterType ="com.spring.lifecare.vo.CustomerVO">       
	 UPDATE customer SET enabled = 0  WHERE customer_id=#{customer_id, jdbcType=VARCHAR}  
  </update>
  
  
   
   <!-- 의사 리스트 불러오기 -->
   <select id="getDoctorList" resultType="com.spring.lifecare.vo.DoctorVO">
		SELECT doctor_num, doctor_faceimg, doctor_id, doctor_name, doctor_major, doctor_position
		  FROM doctor
   </select>
   
   <!-- 예약가능 시간 불러오기 -->
   <select id="getTimeList" resultType="com.spring.lifecare.vo.AppointmentVO">
		select doctor_id, appoint_num, SUBSTR(appoint_date,1,2) || SUBSTR(appoint_date,4,2) || SUBSTR(appoint_date,7,2) as appoint_date, appoint_time
  		from appointment
 		where appoint_enable = 0
 		order by appoint_date, appoint_time
   </select>
   
   <!-- appoint 테이블 예약불가로 update -->
   <update id="updateAppoint" parameterType="int">
	  UPDATE appointment set appoint_enable = 1 WHERE appoint_num = #{appoint_num} 
   </update>
   
   <!-- revervation 테이블 예약추가 -->
   <insert id="addReservation" parameterType="java.util.Map">
   		INSERT INTO hospital_reservation
   		values(#{appoint_num}, #{reservation_date}, #{customer_id}, #{doctor_id})
   </insert>
   
   <!-- 환자검색리스트 -->
   <select id="searchList" resultType="com.spring.lifecare.vo.CustomerVO">
   		select customer_id, customer_name from customer where customer_name like '%'||#{keyword}||'%'
   </select>
   
   <!-- 회원정보 불러오기 -->
   <select id="getCustomerInfo" resultType="com.spring.lifecare.vo.CustomerVO" parameterType="String">
   		 select customer_id, customer_name, customer_gender, customer_year 
   		  from customer
  		 where customer_id = #{customer_id}
   </select>
   
   <!-- 회원정보 불러오기2 -->
   <select id="getCustomerInfo2" resultType="com.spring.lifecare.vo.CustomerVO" parameterType="String">
		 <![CDATA[
		 select * 
           from (select customer_id, customer_name, customer_gender, customer_year, disease_code, diagnosis_time, diagnosis_pi, ROWNUM
                   from (select c.customer_id, c.customer_name, c.customer_gender, c.customer_year, d.disease_code, d.diagnosis_time, d.diagnosis_pi
                           from customer c, diagnosis d 
                          where c.customer_id = #{customer_id}
                            and c.customer_id = d.customer_id 
                          order by d.diagnosis_time desc))
          where ROWNUM <= 1
  		 ]]>
   </select>
   
   <!-- 임시 비밀번호 부여 메일 -->
   <select id="idEmailChk" parameterType="java.util.Map" resultType="int">
		select count(*) from customer where customer_id=#{customer_id} AND customer_email=#{customer_email}
	</select>

  <!--  약찾기 -->
   <select id="searchDrug" parameterType="java.util.Map" resultType="com.spring.lifecare.vo.DrugVO">
   		SELECT * FROM ( 
        SELECT  drug_number ,drug_name, drug_enptname, drug_shape , drug_productimage, drug_frontShape ,drug_formulation , drug_color,drug_size_l, drug_size_s,drug_size_w,drug_category ,drug_division,drug_license_date,drug_effect ,drug_storage, drug_expiration_date,drug_dosage,drug_additives, drug_precautions,rowNum rNum
        FROM( SELECT * FROM DRUG 
        WHERE  
   		<choose>
   		<!-- 5C5 -->
   			<when test="drug_name.isEmpty() and drug_enptname.isEmpty() and drug_shape.length ==0  and drug_form.isEmpty() and drug_color.length ==0" >
	   			1=1
	   		</when>
   		
   		<!-- 5C4 -->
   			<when test="drug_name.isEmpty() and drug_enptname.isEmpty() and drug_shape.length ==0 and drug_form.isEmpty()" >
	   			drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
   			<when test="drug_name.isEmpty() and drug_enptname.isEmpty() and drug_shape.length ==0 and drug_color.length ==0" >
	   			 regexp_like(drug_formulation,#{drug_form})
	   			
	   		</when>
   			<when test="drug_name.isEmpty() and drug_enptname.isEmpty() and drug_form.isEmpty() and drug_color.length ==0" >
	   			drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   		</when>
   			<when test="drug_name.isEmpty() and drug_shape.length ==0  and drug_form.isEmpty() and drug_color.length ==0" >
	   			drug_enptname like '%'||#{drug_enptname}||'%' 
	   		</when>
   			<when test="drug_enptname.isEmpty() and drug_shape.length ==0  and drug_form.isEmpty() and drug_color.length ==0" >
	   			drug_name like '%'||#{drug_name}||'%'
	   		</when>
   		
   		<!-- 5C3  	 -->
	   		<when test="drug_name.isEmpty() and drug_enptname.isEmpty() and drug_shape.length ==0 " >
	   			regexp_like(drug_formulation,#{drug_form})
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		
	   		<when test="drug_name.isEmpty() and drug_enptname.isEmpty() and drug_form.isEmpty() " >
	   			drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   			#{shape}
	   			</foreach>
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		<when test="drug_name.isEmpty() and drug_enptname.isEmpty() and drug_color.length ==0 " >
	   			drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   			#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   		</when>
	   		
	   		<when test="drug_name.isEmpty() and drug_shape.length == 0 and drug_form.isEmpty() " >
	   			 drug_enptname like '%'||#{drug_enptname}||'%' 
	   			 and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		
	   		<when test="drug_name.isEmpty() and drug_shape.length == 0 and drug_color.length ==0 " >
	   			 drug_enptname like '%'||#{drug_enptname}||'%' 
	   			 and regexp_like(drug_formulation,#{drug_form})
	   		</when>
	   		
			<when test="drug_name.isEmpty() and drug_form.isEmpty() and drug_color.length ==0" >
	   			 drug_enptname like '%'||#{drug_enptname}||'%' 
	   			 and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   		</when>
	   		
	   		<when test="drug_enptname.isEmpty() and drug_shape.length == 0 and drug_form.isEmpty() " >
	   			drug_name like '%'||#{drug_name}||'%'
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		 		
	   		<when test="drug_enptname.isEmpty() and drug_shape.length == 0 and drug_color.length ==0" >
	   			drug_name like '%'||#{drug_name}||'%'\
	   			and regexp_like(drug_formulation,#{drug_form})
	   		</when>
	   		 		
	   		 <when test="drug_enptname.isEmpty() and drug_form.isEmpty() and drug_color.length ==0" >
	   			drug_name like '%'||#{drug_name}||'%'
	   			and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   		</when>		
	   		
	   		<when test="drug_shape.length == 0 and drug_form.isEmpty() and drug_color.length ==0" >
	   			drug_name like '%'||#{drug_name}||'%'
	   			and drug_enptname like '%'||#{drug_enptname}||'%' 
	   		</when>
	   		
		<!-- 5C2 -->  		
	   		 <when test="drug_name.isEmpty() and drug_enptname.isEmpty() " >
	   			drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when> 
	   	
	   		<when test="drug_name.isEmpty() and drug_shape.length == 0" >
	   			 drug_enptname like '%'||#{drug_enptname}||'%'
	   			 and regexp_like(drug_formulation,#{drug_form})
	   			 and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		
	   		<when test="drug_name.isEmpty() and drug_form.isEmpty()" >
	   			drug_enptname like '%'||#{drug_enptname}||'%'
	   			and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		
	   		<when test="drug_name.isEmpty() and drug_color.length ==0" >
	   			drug_enptname like '%'||#{drug_enptname}||'%'
	   			and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   		</when>
	   	
	   		<when test="drug_enptname.isEmpty() and drug_shape.length == 0">
	   		 	drug_name like '%'||#{drug_name}||'%'
	   		 	and regexp_like(drug_formulation,#{drug_form})
	   		 	and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		
	   		<when test="drug_enptname.isEmpty() and drug_form.isEmpty()">
	   			drug_name like '%'||#{drug_name}||'%'
	   			and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   			#{shape}
	   			</foreach>
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   	
	   		<when test="drug_enptname.isEmpty() and drug_color.length ==0">
	   			drug_name like '%'||#{drug_name}||'%'
	   			and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   			#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   		</when>
	   		
	   		
	   		<when test="drug_shape.length == 0 and drug_form.isEmpty()">
	   			and drug_name like '%'||#{drug_name}||'%'
	   			drug_enptname like '%'||#{drug_enptname}||'%' 
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		<when test="drug_shape.length == 0 and drug_color.length ==0">
	   			and drug_name like '%'||#{drug_name}||'%'
	   			drug_enptname like '%'||#{drug_enptname}||'%' 
	   			and regexp_like(drug_formulation,#{drug_form})
	   		</when>
	   		
	   		
	   		<when test="drug_form.isEmpty() and drug_color.length ==0 ">
	   			and drug_name like '%'||#{drug_name}||'%'
	   			drug_enptname like '%'||#{drug_enptname}||'%' 
	   			and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   			#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   		</when>
	   		
	   	
		<!-- 5C1 -->	
	   		<when test="drug_name.isEmpty()">
	   			drug_enptname like '%'||#{drug_enptname}||'%'
	   			and 
	   			drug_shape IN
   				<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>

	   		<when test="drug_enptname.isEmpty()">
	   			drug_name like '%'||#{drug_name}||'%'
	   			and 
	   			drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>	 
	   		  		
	   		<when test="drug_shape.length == 0">
	   			 drug_enptname like '%'||#{drug_enptname}||'%'
	   			 and 
	   			 drug_name like '%'||#{drug_name}||'%'
	   			 and regexp_like(drug_formulation,#{drug_form})
	   			 and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>	 
	   		
	   		<when test=" drug_form.isEmpty()">
	   			 drug_enptname like '%'||#{drug_enptname}||'%'
	   			 and drug_name like '%'||#{drug_name}||'%'
	   			 and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>	 
	   		
	   		<when test="drug_color.length ==0 ">
	   			drug_enptname like '%'||#{drug_enptname}||'%' 
	   			and drug_name like '%'||#{drug_name}||'%'
	   			 and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   		</when>
		<!-- 5C0  -->  		
	   		<otherwise>
	   			drug_enptname like '%'||#{drug_enptname}||'%' 
	   			and drug_name like '%'||#{drug_name}||'%'
	   			 and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   			 and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</otherwise>
   		</choose>
   		<![CDATA[
   		  order by drug_name, drug_enptname, drug_number, drug_shape, drug_color))
      	  WHERE rNum >= #{start} AND rNum <= #{end}

      	 ]]>
   </select>

  <!--  검색 count  -->  
   <select id="searchDrugCount" resultType="int" parameterType="java.util.Map">
		SELECT count(*) FROM  DRUG  WHERE  
   		<choose>
   		<!-- 5C5 -->
   			<when test="drug_name.isEmpty() and drug_enptname.isEmpty() and drug_shape.length ==0  and drug_form.isEmpty() and drug_color.length ==0" >
	   			1=1
	   		</when>
   		
   		<!-- 5C4 -->
   			<when test="drug_name.isEmpty() and drug_enptname.isEmpty() and drug_shape.length ==0 and drug_form.isEmpty()" >
	   			drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
   			<when test="drug_name.isEmpty() and drug_enptname.isEmpty() and drug_shape.length ==0 and drug_color.length ==0" >
	   			 regexp_like(drug_formulation,#{drug_form})
	   			
	   		</when>
   			<when test="drug_name.isEmpty() and drug_enptname.isEmpty() and drug_form.isEmpty() and drug_color.length ==0" >
	   			drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   		</when>
   			<when test="drug_name.isEmpty() and drug_shape.length ==0  and drug_form.isEmpty() and drug_color.length ==0" >
	   			drug_enptname like '%'||#{drug_enptname}||'%' 
	   		</when>
   			<when test="drug_enptname.isEmpty() and drug_shape.length ==0 and drug_form.isEmpty()and drug_color.length ==0" >
	   			drug_name like '%'||#{drug_name}||'%'
	   		</when>
   		
   		<!-- 5C3   --> 	
	   		<when test="drug_name.isEmpty() and drug_enptname.isEmpty() and drug_shape.length ==0 " >
	   			regexp_like(drug_formulation,#{drug_form})
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		
	   		<when test="drug_name.isEmpty() and drug_enptname.isEmpty() and drug_form.isEmpty() " >
	   			drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   			#{shape}
	   			</foreach>
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		<when test="drug_name.isEmpty() and drug_enptname.isEmpty() and drug_color.length ==0 " >
	   			drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   			#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   		</when>
	   		
	   		<when test="drug_name.isEmpty() and drug_shape.length == 0 and drug_form.isEmpty() " >
	   			 drug_enptname like '%'||#{drug_enptname}||'%' 
	   			 and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		
	   		<when test="drug_name.isEmpty() and drug_shape.length == 0 and drug_color.length ==0 " >
	   			 drug_enptname like '%'||#{drug_enptname}||'%' 
	   			 and regexp_like(drug_formulation,#{drug_form})
	   		</when>
	   		
			<when test="drug_name.isEmpty() and drug_form.isEmpty() and drug_color.length ==0" >
	   			 drug_enptname like '%'||#{drug_enptname}||'%' 
	   			 and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   		</when>
	   		
	   		<when test="drug_enptname.isEmpty() and drug_shape.length == 0 and drug_form.isEmpty() " >
	   			drug_name like '%'||#{drug_name}||'%'
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		 		
	   		<when test="drug_enptname.isEmpty() and drug_shape.length == 0 and drug_color.length ==0" >
	   			drug_name like '%'||#{drug_name}||'%'
	   			and regexp_like(drug_formulation,#{drug_form})
	   		</when>
	   		 		
	   		 <when test="drug_enptname.isEmpty() and drug_form.isEmpty() and drug_color.length ==0" >
	   			drug_name like '%'||#{drug_name}||'%'
	   			and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   		</when>		
	   		
	   		<when test="drug_shape.length == 0 and drug_form.isEmpty() and drug_color.length ==0" >
	   			drug_name like '%'||#{drug_name}||'%'
	   			and drug_enptname like '%'||#{drug_enptname}||'%' 
	   		</when>
	   		
		<!-- 5C2  --> 		
	   		 <when test="drug_name.isEmpty() and drug_enptname.isEmpty() " >
	   			drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when> 
	   	
	   		<when test="drug_name.isEmpty() and drug_shape.length == 0" >
	   			 drug_enptname like '%'||#{drug_enptname}||'%'
	   			 and regexp_like(drug_formulation,#{drug_form})
	   			 and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		
	   		<when test="drug_name.isEmpty() and drug_form.isEmpty()" >
	   			drug_enptname like '%'||#{drug_enptname}||'%'
	   			and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		
	   		<when test="drug_name.isEmpty() and drug_color.length ==0" >
	   			drug_enptname like '%'||#{drug_enptname}||'%'
	   			and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   		</when>
	   	
	   		<when test="drug_enptname.isEmpty() and drug_shape.length == 0">
	   		 	drug_name like '%'||#{drug_name}||'%'
	   		 	and regexp_like(drug_formulation,#{drug_form})
	   		 	and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		
	   		<when test="drug_enptname.isEmpty() and drug_form.isEmpty()">
	   			drug_name like '%'||#{drug_name}||'%'
	   			and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   			#{shape}
	   			</foreach>
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   	
	   		<when test="drug_enptname.isEmpty() and drug_color.length ==0">
	   			drug_name like '%'||#{drug_name}||'%'
	   			and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   			#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   		</when>
	   		
	   		
	   		<when test="drug_shape.length == 0 and drug_form.isEmpty()">
	   			and drug_name like '%'||#{drug_name}||'%'
	   			drug_enptname like '%'||#{drug_enptname}||'%' 
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		<when test="drug_shape.length == 0 and drug_color.length ==0">
	   			and drug_name like '%'||#{drug_name}||'%'
	   			drug_enptname like '%'||#{drug_enptname}||'%' 
	   			and regexp_like(drug_formulation,#{drug_form})
	   		</when>
	   		
	   		
	   		<when test="drug_form.isEmpty() and drug_color.length ==0 ">
	   			and drug_name like '%'||#{drug_name}||'%'
	   			drug_enptname like '%'||#{drug_enptname}||'%' 
	   			and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   			#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   		</when>
	   		
	   	
		<!-- 5C1 -->
	   		<when test="drug_name.isEmpty()">
	   			drug_enptname like '%'||#{drug_enptname}||'%'
	   			and 
	   			drug_shape IN
   				<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>
	   		
	   		<when test="drug_enptname.isEmpty()">
	   			drug_name like '%'||#{drug_name}||'%'
	   			and 
	   			drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>	 
	   		  		
	   		<when test="drug_shape.length == 0">
	   			 drug_enptname like '%'||#{drug_enptname}||'%'
	   			 and 
	   			 drug_name like '%'||#{drug_name}||'%'
	   			 and regexp_like(drug_formulation,#{drug_form})
	   			 and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>	 
	   		
	   		<when test=" drug_form.isEmpty()">
	   			 drug_enptname like '%'||#{drug_enptname}||'%'
	   			 and drug_name like '%'||#{drug_name}||'%'
	   			 and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   			and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</when>	 
	   		
	   		<when test="drug_color.length ==0 ">
	   			drug_enptname like '%'||#{drug_enptname}||'%' 
	   			and drug_name like '%'||#{drug_name}||'%'
	   			 and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   		</when>
		<!-- 5C0  -->  		
	   		<otherwise>
	   			drug_enptname like '%'||#{drug_enptname}||'%' 
	   			and drug_name like '%'||#{drug_name}||'%'
	   			 and drug_shape IN
	   			<foreach collection="drug_shape" item="shape" open="(" close=")" separator=",">
	   				#{shape}
	   			</foreach>
	   			and regexp_like(drug_formulation,#{drug_form})
	   			 and drug_color IN
	   			<foreach collection="drug_color" item="color" open="(" close=")" separator=",">
	   				#{color}
	   			</foreach>
	   		</otherwise>
   		</choose>
   		  order by drug_name, drug_enptname, drug_number, drug_shape, drug_color
	</select>

	<!-- 약상세 -->
	<select id="drugDetail" parameterType="int" resultType="com.spring.lifecare.vo.DrugVO">
 		SELECT * FROM DRUG WHERE drug_number =#{drug_number}
 	</select>
 	
 	<!-- 약 회사 keyup -->
 	<select id="searchEnptNext" resultType="com.spring.lifecare.vo.DrugVO">
 		SELECT distinct drug_enptname from DRUG 
 		where drug_enptname like '%'||#{entp}||'%' 
 	</select>

	<!-- 약 리스트 keyup -->
   <select id="getDrugList" resultType="com.spring.lifecare.vo.DrugVO">
	  	SELECT  drug_number, drug_name 
		FROM(
		SELECT  drug_number, drug_name , rowNum rNum  
		FROM( SELECT  drug_number, drug_name
            FROM DRUG 
            WHERE drug_name like '%'||#{drug}||'%'
	  		order by drug_name
	  		)   
     )
	  	<![CDATA[
	  	WHERE rNum >0 AND rNum<=10
	  	]]>
   </select>
   
   <!-- 안드로이드 약 사진 조회  -->
   <select id="drugPhotoSeaerch" resultType="com.spring.lifecare.vo.DrugVO" parameterType="java.util.Map">
   		select * from Drug where drug_frontShape IN
  			<foreach collection="mArr" item="frontShape" open="(" close=")" separator=",">
				#{frontShape}
			</foreach>
   		order by drug_name, drug_enptname, drug_number, drug_shape, drug_color
   </select>
   
   <!-- 안드로이드 약 사진 조회  상세-->
   <select id="drugPhotoDetail" resultType="com.spring.lifecare.vo.DrugVO" parameterType="java.util.Map">
   		select * from Drug where drug_number = #{drug_num}
   		order by drug_name, drug_enptname, drug_number, drug_shape, drug_color
   </select>
   
   <!-- 의사정보 불러오기 -->
   <select id="getDoctorInfo" resultType="com.spring.lifecare.vo.DoctorVO" parameterType="String">
   		select * from doctor where doctor_id = #{doctor_id}
   </select>
   
   <!-- 예약가능 시간 불러오기 -->
   <select id="getAppointList" resultType="com.spring.lifecare.vo.AppointmentVO">
		select doctor_id, appoint_num, SUBSTR(appoint_date,1,2) || SUBSTR(appoint_date,4,2) || SUBSTR(appoint_date,7,2) as appoint_date, appoint_time
  		from appointment
  		order by appoint_date, appoint_time
   </select>
   
    <!-- appointment 테이블 예약추가 -->
   <insert id="addAppointment" parameterType="java.util.Map">
   		INSERT INTO appointment
   		values(appoint_seq.nextval, #{doctor_id}, #{appoint_date}, #{appoint_time}, 0)
   </insert>
   
   <!-- 예약스케쥴에 뿌려줄 예약정보 불러오기 -->
   <select id="getReservation" resultType="com.spring.lifecare.vo.ReservationVO" parameterType="String">
   		select appoint_num, reservation_date, customer_id, doctor_id from hospital_reservation where doctor_id = #{doctor_id}
   </select>
   
   <!-- 질병 리스트 불러오기 -->
   <select id="getDiseaseList" resultType="com.spring.lifecare.vo.DiseaseVO">
		select disease_code, disease_name
  		from disease
  		where disease_name like '%'||#{disease}||'%'
   </select>
   
   
   <!-- 진료기록 처리 -->
   <insert id ="insertDiagnosis" parameterType="com.spring.lifecare.vo.DiagnosisVO">
     	INSERT INTO diagnosis 
     	values(diagnosis_seqNum.nextval, 
     	sysdate, 
     	#{customer_id}, 
     	#{doctor_id}, 
     	#{disease_code}, 
     	#{diagnosis_bp, jdbcType=VARCHAR}, 
		#{diagnosis_rr, jdbcType=VARCHAR}, 
		#{diagnosis_pr, jdbcType=VARCHAR}, 
		#{diagnosis_bt, jdbcType=VARCHAR}, 
		#{diagnosis_cc},
		#{diagnosis_phx, jdbcType=VARCHAR}, 
		#{diagnosis_fhx, jdbcType=VARCHAR}, 
		#{diagnosis_pi}, 
		#{diagnosis_ros}, 
		#{diagnosis_pex, jdbcType=VARCHAR}, 
		<if test="drug1 != 0">
			#{drug1},
		</if>
		<if test="drug1 == 0">
			null,
		</if>
		<if test="drug2 != 0">
			#{drug2},
		</if>
		<if test="drug2 == 0">
			null,
		</if>
		<if test="drug3 != 0">
			#{drug3},
		</if>
		<if test="drug3 == 0">
			null,
		</if>
		<if test="drug4 != 0">
			#{drug4},
		</if>
		<if test="drug4 == 0">
			null,
		</if>
		<if test="drug5 != 0">
			#{drug5},
		</if>
		<if test="drug5 == 0">
			null,
		</if>
		<if test="customer_amount != 0">
			#{customer_amount},
		</if>
		<if test="customer_amount == 0">
			16667,
		</if>
		0)
   </insert>
   
   <!-- 진료리스트 -->
   <select id="getDiagnosisList" resultType="com.spring.lifecare.vo.DiagnosisVO">
   		<![CDATA[
   		select ROWNUM, c.insurance, c.customer_name, c.customer_gender, c.customer_year, d.disease_code, d.diagnosis_time 
   		  from customer c, diagnosis d
   		 where c.customer_id = d.customer_id 
   		   and d.doctor_id = #{doctor_id} 
   		   and ROWNUM <= 5
   		 order by d.diagnosis_time DESC
   		]]>
   </select>
   
   <!-- 예약확정된 리스트 -->
   <select id="getReservationList" resultType="com.spring.lifecare.vo.ReservationVO">
   		<![CDATA[
   		select c.insurance, d.doctor_name, d.doctor_major, r.reservation_date, r.appoint_num
   		  from customer c, doctor d, hospital_reservation r
   		 where r.customer_id = c.customer_id
   		   and r.doctor_id = d.doctor_id
   		   and c.customer_id = #{customer_id}
   		   and r.reservation_date > sysdate
   		 order by r.reservation_date
   		]]>
   </select>
   
   <!-- 예약정보 -->
   <select id="getReservationInfo" resultType="com.spring.lifecare.vo.ReservationVO">
		select d.doctor_major, d.doctor_name, r.reservation_date
  		  from doctor d, hospital_reservation r
  		 where r.doctor_id = d.doctor_id
  		   and appoint_num = #{appoint_num}
   </select>
   
   <!-- reservation 테이블에서 데이터 삭제 -->
   <delete id="delectReservation" parameterType="int">
	  delete hospital_reservation 
	  WHERE appoint_num = #{appoint_num} 
   </delete>
   
   <!-- appointment 테이블에서 데이터 수정 -->
   <update id="updateAppointment" parameterType="int">
	  UPDATE appointment set appoint_enable = 0 WHERE appoint_num = #{appoint_num} 
   </update>
   
   <!-- 결제내역 갯수 구하기 -->
   <select id="getDiagnosisCnt" resultType="int">
   		SELECT count(*) as cnt FROM diagnosis where customer_id = #{customer_id}
   </select>
   
   <!-- 결재내역 리스트 -->
   <select id="DiagnosisList" resultType="com.spring.lifecare.vo.DiagnosisVO" parameterType="java.util.Map">
   		<![CDATA[
		SELECT *
		FROM(SELECT diagnosis_num, diagnosis_time, customer_id, customer_amount, customer_payment, rowNum as rNum
			   FROM(SELECT * FROM diagnosis
				 	 order by diagnosis_time desc))
		 WHERE rNum >= #{start} and rNum <= #{end} and customer_id = #{customer_id}
   		 ]]>
   </select>

   <!-- 예약정보 -->
   <select id="getDiagnosisInfo" resultType="com.spring.lifecare.vo.DiagnosisVO">
		select *
  		  from diagnosis
  		 where diagnosis_num = #{diagnosis_num}
   </select>
   
   <!-- 결제성공 -->
   <update id="successPay" parameterType="int">
   		UPDATE diagnosis set customer_payment = 1 WHERE diagnosis_num = #{diagnosis_num}
   </update>
   
   <!-- 관리자 회원목록 -->
   <select id="listMembers" resultType="com.spring.lifecare.vo.CustomerVO">
     SELECT customer_name, customer_id, customer_gender, customer_year, customer_email, customer_phone, enabled FROM customer WHERE authority = 'ROLE_CUSTOMER'
  	</select>
  
  <!-- 관리자 의사 회원목록 -->
    <select id="listDoctors" resultType="com.spring.lifecare.vo.DoctorVO">
     SELECT doctor_name, doctor_id, doctor_num, doctor_email, doctor_phone, doctor_major, doctor_position, enabled FROM doctor WHERE authority = 'ROLE_DOCTOR'
  </select>
   
  <!-- 관리자 회원 상세목록 -->
  <select id="memberInformation" resultType="com.spring.lifecare.vo.CustomerVO">
        SELECT customer_id, customer_name, customer_gender, customer_year, customer_email, customer_phone FROM customer WHERE customer_id=#{customer_id} 
  </select>
  
  <!-- 관리자 의사 상세목록  --> 
  <select id="docInformation" resultType="com.spring.lifecare.vo.DoctorVO">
        SELECT doctor_id, doctor_name, doctor_num, doctor_email, doctor_faceimg, doctor_phone, doctor_major, doctor_position FROM doctor WHERE doctor_id=#{doctor_id} 
  </select>
  
  <!-- 관리자 회원 휴먼처리 -->
 <update id ="deleteList" parameterType ="com.spring.lifecare.vo.CustomerVO">       
	 UPDATE customer SET enabled = 0  WHERE customer_id=#{customer_id, jdbcType=VARCHAR}  
  </update> 
  
  <!-- 의사 회원 퇴사처리  -->
  <update id ="deleteDoctor" parameterType ="com.spring.lifecare.vo.DoctorVO">       
	 UPDATE doctor SET enabled = 0  WHERE doctor_id=#{doctor_id, jdbcType=VARCHAR}  
  </update>

   <!-- 진료결과 조회 리스트 -->
   <select id="pickDiagnosisList" resultType="com.spring.lifecare.vo.DiagnosisVO" parameterType="String">
   		<![CDATA[
		SELECT d.diagnosis_num, d.diagnosis_time, o.doctor_name, o.doctor_major, i.disease_name, d.drug1, d.drug2, d.drug3
		  FROM diagnosis d, doctor o, disease i
		 WHERE d.doctor_id = o.doctor_id
		   AND d.disease_code = i.disease_code
		   AND customer_id = #{customer_id}
		 ORDER BY d.diagnosis_time DESC
   		 ]]>
   </select>
   
   <!-- 미결제 리스트 -->
      <select id="nonpayList" resultType="com.spring.lifecare.vo.DiagnosisVO" parameterType="String">
   		<![CDATA[
		SELECT d.diagnosis_num, d.diagnosis_time, o.doctor_major, d.customer_amount
		  FROM diagnosis d, doctor o
		 WHERE d.doctor_id = o.doctor_id
		   AND customer_payment = 0
		   AND customer_id = #{customer_id}
		 ORDER BY d.diagnosis_time DESC
   		 ]]>
   </select>
   
   <!-- 기초검사결과 작성 -->
   <insert id ="insertBasicEx" parameterType="com.spring.lifecare.vo.BasicExVO">
     	INSERT INTO basicEx 
     	values(basic_seq.nextval, #{customer_id}, #{height}, #{weight}, #{tc}, #{tg}, #{ldl}, #{hdl}, #{blood1}, 
				#{blood2}, #{bloodSugar}, #{white}, #{hb}, #{ast}, #{alt}, #{gtp}, #{kidney1}, #{kidney2}, #{kidney3},
				#{kidney4}, #{ex_result}, sysdate)
   </insert>   
   
   <!-- 기초검사결과 리스트 -->
   <select id="basicExList" resultType="com.spring.lifecare.vo.BasicExVO" parameterType="java.util.Map">
   		<![CDATA[
		SELECT *
		FROM(SELECT ex_num, customer_name, ex_result, basic_date
			   FROM(SELECT b.ex_num, c.customer_name, b.ex_result, b.basic_date FROM customer c, basicEx b
			   		where c.customer_id = b.customer_id
				 	order by b.basic_date desc))
   		 ]]>
   </select>
   
   <!-- 기초검사결과 정보 불러오기 -->
   <select id="getBasicExInfo" resultType="com.spring.lifecare.vo.BasicExVO" parameterType="int">
   		select * 
   		  from basicEx b, customer c 
   		 where b.customer_id=c.customer_id
   		   and ex_num = #{ex_num}
   </select>
   
   <!-- 암검사결과 리스트 -->
   <select id="cancerList" resultType="com.spring.lifecare.vo.CancerVO" parameterType="java.util.Map">
   		<![CDATA[
		SELECT *
		FROM(SELECT cancer_num, customer_name, cancer_result, cancer_date
			   FROM(SELECT a.cancer_num, c.customer_name, a.cancer_result, a.cancer_date FROM customer c, cancerEx a
			   		where c.customer_id = a.customer_id
				 	order by a.cancer_date desc))
   		 ]]>
   </select>
   
   <!-- 암검사결과 정보 불러오기 -->
   <select id="getCancerExInfo" resultType="com.spring.lifecare.vo.CancerVO" parameterType="int">
   		select * 
   		  from cancerEx a, customer c 
   		 where a.customer_id=c.customer_id
   		   and cancer_num = #{cancer_num}
   </select>
   
   <!-- xray검사결과 리스트 -->
   <select id="xrayList" resultType="com.spring.lifecare.vo.XrayExVO" parameterType="java.util.Map">
   		<![CDATA[
		SELECT *
		FROM(SELECT xray_num, customer_name, xray_result, xray_date
			   FROM(SELECT x.xray_num, c.customer_name, x.xray_result, x.xray_date FROM customer c, xray x
			   		where c.customer_id = x.customer_id
				 	order by x.xray_date desc))
   		 ]]>
   </select>
   
   <!-- xray검사결과 정보 불러오기 -->
   <select id="getXrayExInfo" resultType="com.spring.lifecare.vo.XrayExVO" parameterType="int">
   		select * 
   		  from xray x, customer c 
   		 where x.customer_id=c.customer_id
   		   and xray_num = #{xray_num}
   </select>
   
   <!-- 암검사결과 작성 -->
   <insert id ="insertCancerEx" parameterType="com.spring.lifecare.vo.CancerVO">
     	INSERT INTO cancerEx 
     	values(cancer_seq.nextval, #{customer_id}, #{radius}, #{texture}, #{perimeter}, #{area}, #{smoothness}, #{compactness}, #{concavity}, 
				#{symmetry}, #{fractal_dimension}, #{percentage}, #{cancer_result}, sysdate)
   </insert>   
   
   <!-- xray검사결과 작성 -->
   <insert id ="insertXrayEx" parameterType="com.spring.lifecare.vo.XrayExVO">
     	INSERT INTO xray 
     	values(xray_seq.nextval, #{customer_id}, #{xray_img}, #{normal_percentage}, #{corona_percentage}, #{pneumonia_percentage}, #{xray_result}, sysdate)
   </insert> 
</mapper>  	  
